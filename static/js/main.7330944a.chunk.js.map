{"version":3,"sources":["components/documentation/DocumentComponent.js","utils/constants.js","utils/useIntervalHelper.js","context/TimerProvider.js","components/generic/Loading.js","shared/COLOR.js","components/generic/Button.js","utils/HelperFunctions.js","components/generic/DisplayTime.js","components/generic/Input.js","components/generic/DisplayRounds.js","context/TimerQueueProvider.js","components/generic/ButtonPanel.js","components/generic/Panel.js","views/DocumentationView.js","utils/useResetTimerCallback.js","utils/EndConfetti.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","shared/ShowQueuedList.js","views/AddTimersView.js","utils/useResetQueueCallback.js","views/WorkQueueView.js","shared/PageHeader.js","App.js","index.js"],"names":["Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","propDocs","component","title","map","doc","prop","description","type","defaultValue","STATUS","RUNNING_STATUS","LOCATION_TITLE_MAP","useIntervalHelper","workSecs","restSecs","rounds","curSec","curRound","isCountASC","isWorking","isResting","isPaused","wasResting","setStatus","setCurSec","setCurRound","end","status","getCurEndSecs","interval","useRef","savedCallback","current","c","r","console","error","_stopInterval","clearInterval","startInterval","setInterval","stopInterval","TimerContext","createContext","TimerProvider","children","useState","curTimer","setCurTimer","setWorkSecs","setRestSecs","setRounds","setWasResting","setIsCountASC","isEnded","work","Provider","value","pause","resetStart","resetAll","resetToCurTimer","curQTimer","isRunning","includes","isReset","isInCountdown","isInRestingContext","getCurStartSecs","wDescStart","rDescStart","primaryColor","sizeMapping","small","medium","large","Dot","span","props","size","color","DotGroup","Loading","sizeMapped","docs","key","defaultProps","COLOR","primary0","primary1","primary2","primary3","primary4","primaryLightest","secondary10","secondary11","secondary12","secondary13","secondary14","secondary20","secondary21","secondary22","secondary23","secondary24","GENERIC","QUEUE_TIMER","container","background","active","inactive","completed","BUTTON_COLORS","DISPLAY_TIME","label","DISPLAY_ROUNDS","resting","INPUT","DEFAULT","LABEL","PANEL","DISPLAY","default","ready","CONTROLS","xlarge","ButtonStyled","button","activeKey","Button","text","onClick","actve","String","getHmsDisplayFromSecs","secs","getHrsFromSecs","Math","floor","hr","slice","min","getMinRemainderFromSecs","sec","getSecRemainerFromSecs","fontSizeMap","Label","DisplayTime","seconds","textSize","InputContainer","InputStyled","input","LabelStyled","Input","onChange","name","maxNum","htmlFor","id","max","autocomplete","placeholder","undefined","Round","RoundGroup","DisplayRounds","useContext","dots","Array","from","e","i","isCurRound","TimerQueueContext","TimerQueueProvider","timers","setTimers","setCurQTimer","nextTimer","setNextTimer","nextTimerIndex","setNextTimerIndex","totalTime","setTotalTime","queueEnded","setQueueEnded","goToEndofQueue","forEach","timer","state","addTimer","time","deleteTimer","index","deleteTime","filter","initNextTimer","Number","isFinite","length","resetQueueStart","item","ButtonPanel","resetButtonFunc","workButtonFunc","PanelStyle","TitleContainer","InputsContainer","DisplayContainer","bg","ControlsContainer","Panel","timerTitle","inputs","displayTimes","displayRound","displayColorKey","DocList","NavButtonContainer","history","useHistory","components","CurrComp","push","useResetTimerCallback","resetCallback","useEffect","EndConfetti","Stopwatch","event","target","num","parseInt","Countdown","XY","Tabata","ListWrapper","SummaryContainer","TimerSummary","HeaderContainer","TimeHeader","TimeSubHeader","ShowQueuedList","curQueueTime","timerElems","Timers","TimerContainer","Timer","TimerInstruction","TimerQueue","MenuContainer","AddTimersView","chooseTimer","useResetQueueCallback","WorkQueueView","setCurQueueTime","curTimerTime","setCurTimerTime","activeBlock","hasQueuedTimer","StyledHeader","PageHeader","location","useLocation","curPageHeader","pathname","App","path","DocumentationView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7330944a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n`;\n\nconst Documentation = styled.table`\n  flex-grow: 1;\n`;\n\nconst DocumentComponent = ({propDocs, component, title}) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      <Container>\n        <RenderComponent>{component}</RenderComponent>\n        <Documentation>\n          <thead>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {propDocs.map((doc) => {\n              return (\n                  <tr key={doc.prop}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n              );\n            })}\n          </tbody>\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n}\n\nexport default DocumentComponent;\n","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\nexport const STATUS = {\n  RESET: 'reset',\n  COUNTDOWN: 'countdown',\n  WORKING: 'working',\n  RESTING: 'resting',\n  PAUSED: 'paused',\n  ENDED: 'ended',\n  RUNNING: 'running',\n  COMPLETED: 'completed',\n  NOT_RUNNING: 'not running',\n};\n\nexport const RUNNING_STATUS = [\n  STATUS.WORKING,\n  STATUS.RESTING,\n];\n\n// Three status of queued timers\nexport const QUEUE_STATE = [\n  STATUS.RUNNING,\n  STATUS.COMPLETED,\n  STATUS.NOT_RUNNING,\n]\n\nexport const LOCATION_TITLE_MAP = {\n  '/': 'Main Page',\n  '/add': 'Add Timer',\n  '/docs': 'Component Documentation',\n};\n","import { useRef } from 'react';\n// Import helper\nimport { STATUS } from '../utils/constants';\n/**\n * The Iterval Helper is used by the TimerProvider\n * It iterates over the possible timer state changes\n * after each iterval, until it hits the end state.\n * The Interval timer sets context states when moving over\n * boundaries of rounds or between work and rest states.\n * @returns {startInterval, stopInterval} - the 2 APIs for this helper\n */\nconst useIntervalHelper = ({\n  // Range parameters to determine next step\n  workSecs,\n  restSecs,\n  rounds,\n  // The current state of the count and round\n  curSec,\n  curRound,\n  // Indicates which way to move the counter next\n  isCountASC,\n  // State check function to test if currently in rest or work state\n  isWorking,\n  isResting,\n  isPaused,\n  wasResting,\n  // Change state functions\n  setStatus,\n  setCurSec,\n  setCurRound,\n  // The termination function\n  status,\n  end,\n  // The current terminating number\n  getCurEndSecs,\n}) => {\n  // Initialize the 2 ref references\n  const interval = useRef(null);\n  const savedCallback = useRef(null);\n  // const isInIntervaleState = isResting() || isWorking();\n\n  // This function does the work neede between each interval\n  // to ensure the correct state is set on the interval increment.\n  const callback = () => {\n    // If curSec is at curEndSecs, do a change\n    if (curSec === getCurEndSecs()) {\n      // The two active states to increment or change state\n      // are Working or Resting. If neither or these states, do no work.\n      if (isWorking()) {\n        // End, if there are no more rounds and no last rest phase\n        if (curRound === rounds && !(restSecs > 0)) {\n          end();\n        } else if (restSecs > 0) {\n          // Otherwise, start resting\n          setStatus(STATUS.RESTING);\n          setCurSec(c => isCountASC ? 1 : restSecs - 1);\n        } else {\n          // Otherwise, increment the round, and start working again\n          setCurRound(r => r + 1);\n          setCurSec(c => isCountASC ? 1 : workSecs - 1);\n        }\n      } else if (isResting()) {\n        if (curRound === rounds) {\n          // No more rounds, end on this last rest phase\n          end();\n        } else {\n          // More rounds, increment round, and switch from resting to working\n          setStatus(STATUS.WORKING);\n          setCurSec(c => isCountASC ? 1 : workSecs - 1);\n          setCurRound(r => r + 1);\n        }\n      } else {\n        // This will never happen :) ...but, in case it does, it's not invisible\n        console.error('Warning: the interval counter is active, but the Timer context is not in a working state');\n      }\n    } else if (isResting() || isWorking()) {\n      // Iterate the current seconds\n      setCurSec(c => isCountASC ? c + 1 : c - 1);\n    } else {\n      // This is the start of the interval, initialize start seconds\n      setStatus(wasResting ? STATUS.RESTING : STATUS.WORKING);\n      setCurSec(isPaused() ? curSec : (isCountASC ? 1 : workSecs - 1 ));\n      setCurRound(isPaused() ? curRound : (rounds > 0 ? 1 : 0 ));\n    }\n  }\n\n  // Save the above Increment-end work function as the ref callback\n  savedCallback.current = callback;\n\n  // The function to start an interval counter\n  const _startInterval = () => {\n    // Safety check that existing interval is gone\n    _stopInterval();\n    interval.current = setInterval(() => {\n      return (savedCallback.current(), 1000);\n    }, 1000);\n  }\n  // The function to stop and clear the interval\n  const _stopInterval = () => {\n    if (interval.current) {\n      clearInterval(interval.current);\n      interval.current = null;\n    }\n  }\n  // Return the two interval functions\n  return { startInterval: _startInterval, stopInterval: _stopInterval }\n}\n\nexport default useIntervalHelper;\n","import React, {createContext, useState} from 'react';\n// Import helper\nimport useIntervalHelper from '../utils/useIntervalHelper';\nimport { STATUS, RUNNING_STATUS } from '../utils/constants';\n// Crete a Timer context with default empty\nexport const TimerContext = createContext({});\n/**\n * Create a context for the Timers\n */\nconst TimerProvider = ({children}) => {\n  // The current timer\n  const [curTimer, setCurTimer] = useState();\n  // the current seconds state of the timer\n  const [curSec, setCurSec] = useState(0);\n  // the total work seconds for the timer\n  const [workSecs, setWorkSecs] = useState(0);\n  // the total rest seconds for the timer\n  const [restSecs, setRestSecs] = useState(0);\n  // the total number of rounds for the timer\n  const [rounds, setRounds] = useState(0);\n  // the current round state of the timer\n  const [curRound, setCurRound] = useState(0);\n  // Keep track if wasResting before pause\n  const [wasResting, setWasResting] = useState(0);\n  // The direction of the current counter, defaults ascending\n  const [isCountASC, setIsCountASC] = useState(false);\n  // the current running/puse/rest/reset state of the timer\n  const [status, setStatus] = useState(STATUS.RESET);\n  // Set up convinience functions\n  const isRunning = () => {\n    return RUNNING_STATUS.includes(status);\n  }\n  const isPaused = () => {\n    return status === STATUS.PAUSED;\n  }\n  const isEnded = () => {\n    return status === STATUS.ENDED;\n  }\n  const isInCountdown = () => {\n    return status === STATUS.COUNTDOWN;\n  }\n  const isReset = () => {\n    return status === STATUS.RESET;\n  }\n  const isResting = () => {\n    return status === STATUS.RESTING;\n  }\n  const isWorking = () => {\n    return status === STATUS.WORKING;\n  }\n  // Special case context for RESTing status, used for Tabata\n  // TODO: consider moving Workout/Restperiod/Countdown\n  // into a different param than status to remove this complexity\n  const isInRestingContext = () => {\n    return (\n      // the state is RESTING\n      isResting()\n      ||\n      // the state is PAUSED but the pause was for RESTING\n      (wasResting && isPaused())\n      ||\n      // the state is ENDED and timer default is to end on RESTING state\n      (restSecs > 0 && isEnded())\n    );\n  }\n\n  /**\n   * Helper to retrieve the correct \"ending\" sec state for the timer\n   */\n  const getCurEndSecs = () => {\n    if (isResting() || isWorking()) {\n      return (isCountASC ? (isWorking() ? workSecs: restSecs) : 0);\n    } else if (wasResting) {\n      return (isCountASC ? (!wasResting ? workSecs: restSecs) : 0);\n    } else {\n      return (isCountASC ? (restSecs > 0 ? restSecs : workSecs) : 0);\n    }\n  }\n\n  /**\n   * Helper to retrieve the correct \"starting\" sec state for the timer\n   */\n  const getCurStartSecs = () => {\n    const wDescStart =   workSecs;\n    const rDescStart = restSecs;\n    if (isResting() || isWorking()) {\n      return (isCountASC ? 0 : (isWorking() ? wDescStart: rDescStart));\n    } else if (wasResting) {\n      return (isCountASC ? 0 : (!wasResting ? wDescStart: rDescStart));\n    } else {\n      return (isCountASC ? 0 : (restSecs > 1 ? rDescStart : wDescStart));\n    }\n  }\n\n  // -----  State change callback functions ---  //\n\n  /**\n   * Helper end timer state without changing context config\n   */\n  const end = () => {\n    stopInterval();\n    setStatus(STATUS.ENDED);\n    setWasResting(false);\n  }\n\n  /**\n   * Helper start the interval\n   */\n  const work = () => {\n    setStatus(\n      isPaused()\n        ? (wasResting ? STATUS.RESTING : STATUS.WORKING)\n        : STATUS.COUNTDOWN\n      );\n    startInterval();\n  }\n\n  /**\n   * Helper pause timer state without changing context config\n   */\n  const pause = () => {\n    setWasResting(!isWorking());\n    setStatus(STATUS.PAUSED);\n    stopInterval();\n  }\n\n  /**\n   * Helper reset state for the current config\n   */\n  const resetStart = () => {\n    stopInterval();\n    setStatus(STATUS.RESET);\n    setWasResting(false);\n    setCurSec(isCountASC ? 0 : workSecs);\n    setCurRound(0);\n  }\n\n  /**\n   * Helper stop the interval and reset state\n   */\n  const resetAll = () => {\n    stopInterval();\n    setStatus(STATUS.RESET);\n    setWasResting(false);\n    setCurSec(0);\n    setWorkSecs(0);\n    setRestSecs(0);\n    setRounds(0);\n    setCurRound(0);\n  }\n\n  /**\n   * Helper to add a new Timer and reset state to that timer\n   * @param [object] curQTimer - the timer to apply\n   */\n  const resetToCurTimer = (curQTimer) => {\n    setCurTimer(curQTimer);\n    setCurSec(curQTimer.isCountASC ? 0 : curQTimer.workSecs);\n    // Start on the first round if more than one\n    setCurRound(curQTimer.rounds > 0 ? 1 :0);\n    setWorkSecs(curQTimer.workSecs);\n    setRestSecs(curQTimer.restSecs);\n    setRounds(curQTimer.rounds);\n    setIsCountASC(curQTimer.isCountASC);\n    work();\n  }\n\n  // Retrieve the Interval helper API\n  // Give it all it needs to manage context\n  // state between intervals.\n  // Passing as params to avoid cyclic dependency loop with context\n  const { startInterval, stopInterval } = useIntervalHelper({\n    workSecs,\n    restSecs,\n    rounds,\n    curSec,\n    curRound,\n    isCountASC,\n    isWorking,\n    isResting,\n    isPaused,\n    wasResting,\n    setStatus,\n    setCurSec,\n    setCurRound,\n    status,\n    end,\n    getCurEndSecs,\n  });\n\n  return (\n    // Expose global values to the timer children\n    <TimerContext.Provider\n      value={{\n         isCountASC,\n         setIsCountASC,\n         curSec,\n         setCurSec,\n         workSecs,\n         setWorkSecs,\n         restSecs,\n         setRestSecs,\n         rounds,\n         setRounds,\n         curRound,\n         setCurRound,\n         status,\n         work,\n         pause,\n         end,\n         resetStart,\n         resetAll,\n         resetToCurTimer,\n         isRunning,\n         isPaused,\n         isEnded,\n         isResting,\n         isWorking,\n         isReset,\n         isInCountdown,\n         isInRestingContext,\n         getCurStartSecs,\n         getCurEndSecs,\n         curTimer,\n         setCurTimer,\n       }}>\n      {children}\n    </TimerContext.Provider>\n  );\n}\n\nexport default TimerProvider;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = ({ color, size }) => {\n  const sizeMapped = sizeMapping[size];\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={sizeMapped} color={color} />\n        <Dot size={sizeMapped} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={sizeMapped} color={color} />\n        <Dot size={sizeMapped} color={color} />\n      </DotGroup>\n    </Container>\n  );\n}\n\n// Class description for the docs\nLoading.docs =   {\n    title: 'Loading spinner ',\n    component: <Loading />,\n    props: [\n      {\n        prop: 'size',\n        key: 'size',\n        description: \"Changes the size of the loading spinner\",\n        type: \"string\",\n        defaultValue: \"medium\",\n      },\n      {\n        prop: 'color',\n        key: 'color',\n        description: \"Changes the color of the loading spinner\",\n        type: \"string\",\n        defaultValue: primaryColor,\n      }\n    ]\n}\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","/* CSS - Cascading Style Sheet */\n/* Palette color codes */\n/* Palette URL: http://paletton.com/#uid=34h0r1klhllaDvZfYqDqyg2vUaIklhllaDvZfYqDqyg2vUaIklhllaDvZfYqDqyg2vUaI */\n/* \"Feel free to copy&paste color codes to your application\" */\n/* As hex codes, the following is the way the codes are ouput from Palette Color Codes */\nconst COLOR = {\n  primary0: { color: '#433075' },\t/* Main Primary color */\n  primary1: { color: '#897BAF' },\n  primary2: { color: '#635192' },\n  primary3: { color: '#291758' }, /* Darkest */\n  primary4: { color: '#15073B' },\n  primaryLightest: {color: '#B8AFCF'},\n\n  secondary10: { color: '#AAAA39' },\t/* Main Secondary color (1) */\n  secondary11: { color: '#FFFFAA' },\n  secondary12: { color: '#D4D46A' },\n  secondary13: { color: '#808016' },\n  secondary14: { color: '#555500' },\n\n  secondary20: { color: '#AA8839' },\t/* Main Secondary color (2) */\n  secondary21: { color: '#FFE5AA' },\n  secondary22: { color: '#D4B56A' },\n  secondary23: { color: '#806016' },\n  secondary24: { color: '#553C00' },\n};\n\n// Define different component generic color sets\nconst GENERIC = {\n  COLOR,\n  QUEUE_TIMER: {\n    container: {\n      color: COLOR.secondary12.color,\n      background: COLOR.primary1.color,\n    },\n    active: {\n      color: COLOR.primary4.color,\n      background: COLOR.secondary22.color,\n    },\n    inactive: {\n      color: COLOR.primaryLightest.color,\n      background: COLOR.primary3.color,\n    },\n    completed: {\n      color: COLOR.primary3.color,\n      background: COLOR.secondary20.color,\n    },\n  },\n  BUTTON_COLORS:{\n    active: {\n      color: COLOR.primary4.color,\n      background: COLOR.secondary22.color,\n    },\n    inactive: {\n      color: COLOR.secondary21.color,\n      background: COLOR.primary3.color\n    },\n  },\n  DISPLAY_TIME: {\n    label: {\n      color: COLOR.primaryLightest.color,\n    },\n    active: {\n      color: COLOR.secondary11.color,\n    },\n    inactive: {\n      color: COLOR.secondary10.color,\n    },\n  },\n  DISPLAY_ROUNDS: {\n    active: {\n      color: COLOR.primary4.color,\n      background: COLOR.secondary10.color,\n    },\n    inactive: {\n      color: COLOR.secondary13.color,\n      background: COLOR.primary1.color,\n    },\n    resting: {\n      color: COLOR.primary1.color,\n      background: COLOR.primary3.color,\n    },\n    label: {\n      color: COLOR.primaryLightest.color,\n    }\n  },\n  INPUT: {\n    DEFAULT: {\n      color: COLOR.primary3.color,\n      background: COLOR.primaryLightest.color,\n    },\n    LABEL: {\n      color: COLOR.primaryLightest.color,\n    }\n  },\n  PANEL: {\n    DEFAULT:{\n      color: COLOR.primary0.color,\n      background: COLOR.primary1.color,\n    },\n    INPUT:{\n      background: COLOR.primary2.color,\n    },\n    DISPLAY:{\n      default: {background: COLOR.primary0.color},\n      ready: {background: COLOR.secondary12.color},\n      end: {background: COLOR.secondary14.color},\n    },\n    CONTROLS: {\n      background: COLOR.primary2.color,\n    },\n  }\n}\n\nexport default GENERIC;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport GENERIC  from \"../../shared/COLOR\";\n\nconst sizeMapping = {\n  // In pixels\n  small: 60,\n  medium: 80,\n  large: 100,\n  xlarge: 140,\n};\n\n// Make rounded corner button, but not as round as the RoundsDisplay\n// Add different style for hover and active (click) to emphasize user action\nconst ButtonStyled = styled.button`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: 60px;\n  margin: 7px;\n  text-align: center;\n  font-size: .9em;\n  text-decoration: none;\n  background-color: ${(props) => {\n    return GENERIC.BUTTON_COLORS[props.activeKey].background\n  }};\n  color: ${(props) => {\n    return GENERIC.BUTTON_COLORS[props.activeKey].color\n  }};\n  border: none;\n  border-radius: 10px;\n  &:hover {\n        outline: none;\n        box-shadow: 0px 0px 6px black;\n    };\n  &:active {\n        outline: none;\n        box-shadow: 0px 0px 2px red;\n        opacity: 0.8;\n    };\n`;\n\nconst Button = ({ active, text, onClick, size }) => {\n  const sizeMapped = sizeMapping[size];\n  return (\n      <ButtonStyled\n        size={sizeMapped}\n        type=\"Button\"\n        defaultValue={text}\n        value={text}\n        activeKey={ active ? 'active' : 'inactive' }\n        onClick={onClick}\n      >\n        {text}\n      </ButtonStyled>\n  );\n};\n\nButton.propTypes = {\n  // Indicates if this is a primary or secondary button\n  active: PropTypes.bool,\n  // The relative size of the button to display\n  size: PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']),\n  // The text to display in the button\n  text: PropTypes.string,\n  // The call back to use when the button is clicked\n  onClick: PropTypes.func.isRequired,\n};\n\nButton.defaultProps = {\n  actve: true,\n  size: 'medium',\n  text: 'Press',\n};\n\n// Class description for the docs\nButton.docs =   {\n    title: 'Button ',\n    component: <Button defaultValue=\"\" onClick={()=>{}} />,\n    props: [\n      {\n        prop: 'active',\n        key: 'active',\n        description: 'Wether this is the active button',\n        type: 'boolean',\n        defaultValue: String(Button.defaultProps.actve),\n      },\n      {\n        prop: 'size',\n        key: 'size',\n        description: \"Changes the size of the button\",\n        type: \"string\",\n        defaultValue: Button.defaultProps.size,\n      },\n      {\n        prop: 'text',\n        key: 'text',\n        description: 'The text to display on the button',\n        type: 'string',\n        defaultValue: Button.defaultProps.text,\n      },\n      {\n        prop: 'onClick',\n        key: 'onClick',\n        description: 'Callback for click event on button',\n        type: 'function',\n        defaultValue: 'none',\n      }\n    ]\n};\n\nexport default Button;\n","/**\n * Helper to convert seconds into display HH:MM:SS\n */\nexport const getHmsDisplayFromSecs = (secs) => {\n  const getHrsFromSecs = (secs) => Math.floor(secs / (60 * 60));\n  const getMinRemainderFromSecs = (secs) =>  Math.floor(secs % (60 * 60) / 60);\n  const getSecRemainerFromSecs = (secs) =>  Math.floor(secs % (60 * 60) % 60);\n  const hr = `${('00' + getHrsFromSecs(secs)).slice(-2)}`;\n  const min = `${('00' + getMinRemainderFromSecs(secs)).slice(-2)}`;\n  const sec = `${('00' + getSecRemainerFromSecs(secs)).slice(-2)}`;\n  // return HH:mm:ss only if time contains hours\n  if (getHrsFromSecs(secs) > 0) {\n    return `${hr}:${min}:${sec}`;\n  }\n  return `${min}:${sec}`;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n// Import centralized Timer color\nimport GENERIC  from '../../shared/COLOR';\n// Import timer utlity function\nimport { getHmsDisplayFromSecs } from '../../utils/HelperFunctions';\n\nconst fontSizeMap = {\n  small: '.8em',\n  medium: '1em',\n  large: '3.4em',\n};\n\nconst Container = styled.div`\n  text-align: center;\n  font-size: ${(props) => props.size};\n  color: ${(props) => {\n    return GENERIC.DISPLAY_TIME[props.activeKey].color\n  }};\n`;\n\nconst Label = styled.span`\n  margin-right: 20px;\n  color: ${GENERIC.DISPLAY_TIME.label.color};\n`;\n\n/**\n * Display Time is used to show a time, either the active or total\n * number of seconds of the Timer. A Timer may use multiple DisplayTime\n * components to display different second sets.\n */\nconst DisplayTime = ({ seconds, label, active, size }) => {\n  // const seconds = 7446; //2hr, 4 min, 6 secs\n  const textSize = fontSizeMap[size];\n  return (\n    <Container\n      size={textSize}\n      activeKey={active ? 'active' : 'inactive'}\n    >\n      {!active && label && <Label>{label}</Label>}\n      { getHmsDisplayFromSecs(seconds) }\n    </Container >\n  );\n};\n\nDisplayTime.propTypes = {\n  // The number of seconds to display\n  seconds: PropTypes.number,\n  // The label to display before the time display\n  label: PropTypes.string,\n  // The relative display size to use\n  size: PropTypes.string,\n  // Wether this is the a primary display or secondary\n  active: PropTypes.bool,\n};\n\nDisplayTime.defaultProps = {\n  seconds: 0,\n  label: 'Work',\n  size: 'medium',\n  active: false,\n};\n\n// Class description for the docs\nDisplayTime.docs =   {\n    title: 'Display Time ',\n    component: <DisplayTime />,\n    props: [\n      {\n        prop: 'seconds',\n        key: 'seconds',\n        description: 'Changes the time diplayed',\n        type: 'integer',\n        defaultValue: DisplayTime.defaultProps.seconds,\n      },\n      {\n        prop: 'label',\n        key: 'label',\n        description: 'Optional label for display time',\n        type: 'string',\n        defaultValue: DisplayTime.defaultProps.label,\n      },\n      {\n        prop: 'active',\n        key: 'active',\n        description: 'Wether this is the active time display',\n        type: 'boolean',\n        defaultValue: String(DisplayTime.defaultProps.active),\n      },\n      {\n        prop: 'size',\n        key: 'size',\n        description: 'Size of display time',\n        type: 'string',\n        defaultValue: DisplayTime.defaultProps.size,\n      }\n    ]\n}\n\nexport default DisplayTime;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport GENERIC  from \"../../shared/COLOR\";\n\nconst primaryColor =  GENERIC.INPUT.DEFAULT.background;\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  width: 330px;\n  background-color: ${GENERIC.PANEL.INPUT.background};\n`;\n\nconst InputStyled = styled.input`\n  flex: 1;\n  padding: 5px 10px;\n  width: 80px;\n  text-align: right;\n  text-decoration: none;\n  font-weight: bold;\n  color: ${GENERIC.INPUT.color};\n  background-color: ${primaryColor};\n  border-color: ${GENERIC.PANEL.INPUT.background};\n  border-width: medium;\n  border-radius: 20px;\n  margin-left: 10px;\n`;\n\nconst LabelStyled = styled.label`\n  flex: 1;\n  color: ${GENERIC.INPUT.LABEL.color};\n  text-align: right;\n`;\n/**\n * A Generic Input\n * The context of the input is controlled from the timer through\n * the timer's context provider.\n */\nconst Input = ({value, onChange, name, label, maxNum}) => {\n  return (\n    <InputContainer>\n      <LabelStyled\n        htmlFor={name}\n      >\n        {label}\n        :\n      </LabelStyled>\n      <InputStyled\n        id={name}\n        name={name}\n        type=\"number\"\n        min=\"0\"\n        max={maxNum}\n        onChange={onChange}\n        autocomplete=\"off\"\n        placeholder={0}\n        value={value}\n      />\n    </InputContainer>\n  )\n};\n\nInput.propTypes = {\n  // The input element name identifier to use\n  name: PropTypes.string,\n  // The display text to use for the input\n  label: PropTypes.string,\n  // The value to display in the input\n  value: PropTypes.number,\n  // The max number allowed in the input\n  maxNum: PropTypes.number,\n  // The callback to use when the input changes\n  onChange: PropTypes.func.isRequired,\n};\n\nInput.defaultProps = {\n  name: 'Input',\n  label: 'Input',\n  value: undefined,\n  maxNum: 86400, // 24 hours\n};\n\n\n// Class description for the docs\nInput.docs =   {\n    title: 'Input ',\n    component: <Input defaultValue=\"\" onChange={()=>{}} />,\n    props: [\n      {\n        prop: 'name',\n        key: 'name',\n        description: 'Name of input field',\n        type: 'string',\n        defaultValue: Input.defaultProps.name,\n      },\n      {\n        prop: 'label',\n        key: 'label',\n        description: 'label for input field',\n        type: 'string',\n        defaultValue: Input.defaultProps.label,\n      },\n      {\n        prop: 'value',\n        key: 'value',\n        description: 'Value of input field',\n        type: 'number from 0 to maxNum',\n        defaultValue: 'none',\n      },\n      {\n        prop: 'maxNum',\n        key: 'maxNum',\n        description: 'Maximum input number',\n        type: 'number',\n        defaultValue: Input.defaultProps.maxNum,\n      },\n      {\n        prop: 'onChange',\n        key: 'onChange',\n        description: \"Callback for change of input\",\n        type: \"function\",\n        defaultValue: 'none',\n      }\n    ]\n}\n\nexport default Input;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport GENERIC  from \"../../shared/COLOR\";\n\nimport { TimerContext } from \"../../context/TimerProvider\";\n\nconst sizeMapping = {\n  small: 20,\n  medium: 40,\n  large: 60,\n};\n\nconst Container = styled.div`\n  margin-top: 20px;\n  background-color: ${GENERIC.PANEL.DISPLAY.background};\n`;\n\nconst Round = styled.span`\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => {\n    return GENERIC.DISPLAY_ROUNDS[props.activeKey].background\n  }};\n  color: ${(props) => {\n    return GENERIC.DISPLAY_ROUNDS[props.activeKey].color\n  }};\n  border-radius: 100%;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n`;\n\nconst RoundGroup = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  &:before {\n    content: \"Round\";\n    color: ${GENERIC.DISPLAY_ROUNDS.label.color};\n    padding-right:10px;\n  }\n`;\n\n/**\n * A functional component to display the current round\n * the timer is in in the context of the total number of rounds\n * The current round changes appearance if in a\n * resting context vs working context.\n */\nconst DisplayRounds = () => {\n  const {\n    rounds,\n    curRound,\n    isInRestingContext,\n  } = useContext(TimerContext);\n\n  // construct the round row\n  const dots = Array.from(Array(rounds), (e,i)=>i+1).map(i => {\n    const isCurRound = (i === curRound);\n    return (\n      <Round\n        size={isCurRound ? sizeMapping.large : sizeMapping.medium}\n        activeKey={\n          isCurRound\n          ? (isInRestingContext() ? 'resting' :'active')\n          : 'inactive'\n        }\n        key={i}\n      >\n        {isCurRound && curRound}\n      </Round>\n    );\n  })\n\n  return (\n    <Container>\n      <RoundGroup>\n        {dots}\n      </RoundGroup>\n    </Container>\n  );\n};\n\n// Class description for the docs\nDisplayRounds.docs =   {\n  title: 'Display rounds ',\n  component: <DisplayRounds />,\n  // No more props, all comes from context \n  props: [],\n};\n\nexport default DisplayRounds;\n","import React, {createContext, useState} from 'react';\n// Import helper\nimport { STATUS } from '../utils/constants';\n// Crete a Timer context with default empty\nexport const TimerQueueContext = createContext({});\n\n/**\n * Create a context for the Timers\n */\nconst TimerQueueProvider = ({children}) => {\n  // The array of Timers\n  const [timers, setTimers] = useState([]);\n  // The current timer\n  const [curQTimer, setCurQTimer] = useState();\n  // The next in queue timer\n  const [nextTimer, setNextTimer] = useState();\n  // The next timerIndex\n  const [nextTimerIndex, setNextTimerIndex] = useState();\n  // the total work seconds for the timer\n  const [totalTime, setTotalTime] = useState(0);\n  // Special queue ended state\n  const [queueEnded, setQueueEnded] = useState();\n\n  /**\n   * API to add a timer from the queue\n   * And update the total time\n   * @param {object} configedTimer\n   */\n  const addTimer = (timer) => {\n    setTimers(timers => [...timers, timer]);\n    const time = ((timer.workSecs || 0) + (timer.restSecs || 0)) * (timer.rounds || 1);\n    setTotalTime(totalTime + time)\n  }\n\n  /**\n   * API to delete a timer from the queue\n   * @param {object} configedTimer\n   */\n  const deleteTimer = (index) => {\n    let deleteTime;\n    setTimers(timers.filter((timer, i) => {\n      if (i === index) {\n        deleteTime = ((timer.workSecs || 0) + (timer.restSecs || 0)) * (timer.rounds || 1);\n        return undefined;\n      } else {\n        return timer;\n      }\n    }));\n    setTotalTime(totalTime - deleteTime);\n  };\n\n  /**\n   * API to reset the timer queue state of the timers\n   */\n  const resetQueueStart = () => {\n    setCurQTimer();\n    setNextTimer();\n    setNextTimerIndex();\n    setQueueEnded(false);\n    timers.forEach((item) => {\n      item.state = STATUS.NOT_RUNNING;\n    });\n  }\n\n  /**\n   * Shortcut to jump to the end of the timer queue\n   */\n  const goToEndofQueue = () => {\n    timers.forEach((timer) => {\n      timer.state = STATUS.COMPLETED;\n    })\n    setCurQTimer();\n    setNextTimer();\n    setNextTimerIndex();\n    setQueueEnded(true);\n  }\n\n  /**\n   * API to start the timer queue by setting curQTimer\n   */\n  const initNextTimer = () => {\n    // Set initial timer\n    if (!curQTimer) {\n      setCurQTimer(timers.length > 0 ? timers[0] : undefined);\n      setNextTimer(timers.length > 1 ? timers[1] : undefined);\n      setNextTimerIndex(timers.length > 1 ? 1 : undefined);\n    }\n    // Check if last timer\n    else if (!Number.isFinite(nextTimerIndex)) {\n      goToEndofQueue();\n      // Else go to next timer\n    } else {\n      curQTimer.state = STATUS.COMPLETED;\n      setCurQTimer(timers[nextTimerIndex]);\n      setNextTimer(\n        timers.length > nextTimerIndex + 1\n        ? timers[nextTimerIndex + 1]\n        : undefined\n      );\n      setNextTimerIndex(\n        timers.length > nextTimerIndex + 1\n        ? nextTimerIndex + 1\n        : undefined\n      );\n    }\n  }\n\n  // -----  State change callback functions ---  //\n\n\n  return (\n    // Expose global values to the timer children\n    <TimerQueueContext.Provider\n      value={{\n         timers,\n         setTimers,\n         curQTimer,\n         nextTimer,\n         totalTime,\n         setTotalTime,\n         addTimer,\n         deleteTimer,\n         initNextTimer,\n         resetQueueStart,\n         goToEndofQueue,\n         queueEnded,\n       }}>\n      {children}\n    </TimerQueueContext.Provider>\n  );\n}\n\nexport default TimerQueueProvider;\n","/**\n* ButtonPanel handles layout of the the button set\n*/\nimport React, {useContext} from \"react\";\nimport styled from \"styled-components\";\n\n// Import the data provider\nimport { TimerContext } from \"../../context/TimerProvider\";\nimport { TimerQueueContext } from '../../context/TimerQueueProvider';\n\n// Import status/state constants\nimport { STATUS } from '../../utils/constants';\n\nimport Button from \"./Button\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n`;\n\nconst ButtonPanel = () => {\n  const {\n    pause,\n    end,\n    work,\n    resetStart,\n    resetAll,\n    isPaused,\n    isRunning,\n    isReset,\n    isInCountdown,\n    curTimer,\n    workSecs,\n    restSecs,\n    isCountASC,\n    rounds,\n  } = useContext(TimerContext);\n\n  const {\n    addTimer,\n   } = useContext(TimerQueueContext);\n\n  // All timers use these two buttons\n  // The Reset button handles ending, reseting to start, or clearing all state\n  const resetButtonFunc = (\n    isRunning() || isPaused() || isInCountdown()\n    ? end\n    : (isReset() ? resetAll : resetStart)\n  );\n  // the Work button handles pausing and playing the timer\n  // The 2 options are ability to pause the timer if it's running\n  // Or the ability to add the timer to the queue if it's in config state (not running)\n  const workButtonFunc = (\n    isRunning() || isInCountdown()\n      ? pause\n      // Add timer to timer queue with config\n      : (\n        isPaused()\n        ? work\n        : (\n          () => {\n           // At least 1 work second required\n           if (workSecs < 1) {\n             return;\n           }\n           addTimer({\n             workSecs,\n             restSecs,\n             isCountASC: isCountASC,\n             rounds,\n             title: curTimer.title,\n             component: curTimer.component,\n             state: STATUS.NOT_RUNNING,\n           });\n         }\n        )\n      )\n  );\n\n  return (\n    <Container>\n      <Button\n        size='large'\n        active={false}\n        text={(\n          isRunning() || isPaused() || isInCountdown()\n          ? 'End'\n          : (\n            isReset()\n            ? 'Clear'\n            : 'Reset'\n          )\n        )}\n        onClick={resetButtonFunc}\n      />\n      <Button\n        size='large'\n        active={true}\n        text={(\n          isRunning() || isInCountdown()\n          ? 'Pause'\n          : (isReset() ? 'Add Timer' : 'Resume')\n        )}\n        onClick={workButtonFunc}\n      />\n    </Container>\n  )\n};\n\n// Class param description for the docs\nButtonPanel.docs =   {\n  title: 'ButtonPanel ',\n  component: <ButtonPanel  onClick={()=>{}} />,\n  // No more props, gets it all from context\n  props: [],\n}\n\nexport default ButtonPanel;\n","/**\n * Panel handles layout of the components of the timer\n */\n import React, {useContext} from \"react\";\n import PropTypes from \"prop-types\";\n import styled from \"styled-components\";\n\n // Import component\n import ButtonPanel from \"./ButtonPanel\";\n import Input from \"../generic/Input\";\n import DisplayTime from \"../generic/DisplayTime\";\n\n // Import the data provider\n import { TimerContext } from \"../../context/TimerProvider\";\n\n //import constants and shared\n import GENERIC  from \"../../shared/COLOR\";\n\n const primaryColor =  GENERIC.PANEL.DEFAULT.background;\n\n const PanelStyle = styled.div`\n   display: flex;\n   flex-direction: column;\n   justify-content: center;\n   /* Using Gill Sans because it's fun, easy to read, and emits energy */\n   font-family: \"Gill Sans\", sans-serif;\n   background-color: ${primaryColor};\n   color: ${GENERIC.PANEL.DEFAULT.color};\n`;\n\nconst TitleContainer = styled.div`\n  color: ${GENERIC.PANEL.INPUT.background};\n  background-color: ${GENERIC.BUTTON_COLORS.inactive.background};\n  padding-bottom: .5em;\n  font-size: 3em;\n  font-weight: bold;\n  text-align: center;\n`;\n//   padding: 40px 2px;\n const InputsContainer = styled.div`\n   color: ${GENERIC.PANEL.INPUT.color};\n   background-color: ${GENERIC.PANEL.INPUT.background};\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n   width: 500px;\n   padding-top: .5em;\n   padding-bottom: 10px;\n`;\n\n  const DisplayContainer = styled.div`\n    background-color: ${(props) => {\n      return GENERIC.PANEL.DISPLAY[props.bg].background\n    }};\n    display: flex;\n    flex-direction: column;\n    align-content: center;\n    justify-content: center;\n    padding: 60px 60px 20px;\n    flex-grow: 1;\n  `;\n\n  const ControlsContainer = styled.div`\n    background-color: ${GENERIC.PANEL.CONTROLS.background};\n    padding: 20px 40px;\n  `;\n\n  /**\n   * the Panel function\n   */\n const Panel = ({\n   timerTitle,\n   inputs,\n   displayTimes,\n   displayRound,\n }) => {\n   // The inputs are only shown in the RESET state.\n   // The inputs are hidden when the timer is running or paused.\n   const {\n     isReset,\n     isCountASC,\n     curSec,\n     isEnded,\n     isRunning,\n     getCurStartSecs,\n   } = useContext(TimerContext);\n\n   // Change color depending on state\n   const displayColorKey = (\n     // If start of Timer, or inbetween rounds\n     isRunning() && (isCountASC ? curSec <= getCurStartSecs() : curSec >= getCurStartSecs())\n     ? 'ready'\n     // If ended or in the middle of a count\n     : (isEnded() ? 'end' : 'default' )\n    );\n\n    return (\n     <PanelStyle>\n      {(isReset() && (\n        <InputsContainer>\n          {inputs}\n        </InputsContainer>\n      ))}\n      <DisplayContainer bg={displayColorKey}>\n          {displayTimes}\n          {displayRound}\n      </DisplayContainer>\n      <ControlsContainer>\n        <ButtonPanel/>\n      </ControlsContainer>\n      <TitleContainer>\n        {timerTitle}\n      </TitleContainer>\n     </PanelStyle>\n   );\n };\n\n Panel.propTypes = {\n   timerTitle: PropTypes.string.isRequired,\n   inputs: PropTypes.arrayOf(Input),\n   displayTimes: PropTypes.arrayOf(DisplayTime),\n   displayRound: PropTypes.node,\n };\n\n // Class description for the docs\n Panel.docs =   {\n     title: 'Panel ',\n     component: <Panel onClick={()=>{}} timerTitle=\"Panel\" />,\n     props: [\n       {\n         prop: 'timerTitle',\n         key: 'timerTitle',\n         description: \"The name of the timer\",\n         type: \"String\",\n         defaultValue: \"none\",\n       },\n       {\n         prop: 'inputs',\n         key: 'inputs',\n         description: \"An array of Input objects\",\n         type: \"[Input]\",\n         defaultValue: \"none\",\n       },\n       {\n         prop: 'displayRound',\n         key: 'displayRound',\n         description: \"A DisplayRound object\",\n         type: \"DisplayRound\",\n         defaultValue: \"none\",\n       },\n       {\n         prop: 'displayTimes',\n         key: 'displayTimes',\n         description: \"An Array of DisplayTimes objects\",\n         type: \"[DisplayTimes]\",\n         defaultValue: \"none\",\n       }\n     ]\n }\n\n export default Panel;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport TimerProvider from \"../context/TimerProvider\";\n\n// Components to describe\nimport Loading from \"../components/generic/Loading\";\nimport Button from \"../components/generic/Button\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\nimport Input from \"../components/generic/Input\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\nimport Panel from \"../components/generic/Panel\";\nimport ButtonPanel from \"../components/generic/ButtonPanel\";\n\n// The list of components to Describe\nconst DocList = [Loading, DisplayTime, Input, DisplayRounds, Button, ButtonPanel, Panel];\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  width: 80%;\n`;\nconst NavButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  margin: auto;\n  width: 80%;\n`;\n\nconst Documentation = () => {\n  // For routing button\n  const history = useHistory();\n  // compomose the component elements\n  const components = DocList.map(CurrComp => {\n    const {title, component, props} = CurrComp.docs;\n    return (\n      <DocumentComponent\n        key={title}\n        title= {title}\n        component={component}\n        propDocs={props}\n      />\n    )\n  })\n  return (\n    <Container>\n      <NavButtonContainer>\n        <Button\n          key='Show-Queue'\n          size='xlarge'\n          active={true}\n          text='Back to Main Page'\n          onClick={() => history.push(`/`)}\n        />\n       <Button\n         key='Add-Timer'\n         size='xlarge'\n         active={false}\n         text='Add Timer'\n         onClick={() => history.push(`/add`)}\n       />\n      </NavButtonContainer>\n      <TimerProvider>\n        {components}\n      </TimerProvider>\n    </Container>\n  );\n}\n\nexport default Documentation;\n","import {useContext, useEffect, useRef} from \"react\";\nimport { TimerContext } from \"../context/TimerProvider\";\n\n/**\n * Custom hook to reset all state when a Timer unloads\n */\nconst useResetTimerCallback = () => {\n  const { resetAll } = useContext(TimerContext);\n  // Create a reset ref\n  const resetCallback = useRef(() => {\n    resetAll();\n  });\n\n  // On unload reset all timer context\n  useEffect(() => {\n    return () => {\n      resetCallback.current();\n    };\n  },[resetCallback]);\n\n  // Set the current callback ref\n  resetCallback.current = () => {\n    resetAll();\n  }\n}\nexport default useResetTimerCallback;\n","import { useContext } from \"react\";\nimport { TimerContext } from \"../context/TimerProvider\";\n/**\n * A fun component to drop confetti all over the view\n * to celebrate the end of a timer.\n * from https://www.npmjs.com/package/react-confetti\n */\nimport Confetti from 'react-confetti';\n\n/**\n * A fun component to drop confetti all over the view\n * to celebrate the end of a timer.\n * from https://www.npmjs.com/package/react-confetti\n */\nconst EndConfetti = () => {\n    const { isEnded } = useContext(TimerContext);\n    return isEnded() && <Confetti/>\n }\n\n export default EndConfetti;\n","import React, {useContext, useEffect } from \"react\";\n\n// Import components\nimport Panel from \"../generic/Panel\";\nimport Input from \"../generic/Input\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport { TimerContext } from \"../../context/TimerProvider\";\n\n// Hook to reset all state when component unloads\nimport useResetTimerCallback from \"../../utils/useResetTimerCallback\";\n// Component to show a fun effect when timer ends\nimport EndConfetti from '../../utils/EndConfetti';\n\n/**\n * Stopwatch functional component\n * Has one input and a display that counts up\n * and a display that shows the ending time.\n */\nconst Stopwatch = () => {\n  const timerTitle = \"Stopwatch\";\n  const {\n    curSec,\n    workSecs,\n    setWorkSecs,\n    setIsCountASC,\n  } = useContext(TimerContext);\n\n  // Hook to reset all state when component unloads;\n  useResetTimerCallback();\n\n  // Create input components\n  const inputs = [\n     <Input\n      onChange={(event) => {\n        if (event && event.target) {\n          const num = parseInt(event.target.value);\n          setWorkSecs((num > 0 ? num : 0));\n        }\n      }}\n      key=\"input-total-seconds\"\n      label=\"End seconds\"\n      name=\"seconds\"\n      value={workSecs}\n    />\n  ];\n  // Create Display Time components\n  // Stop watch shows 2 display times, the count up and end time\n  const displayTimes = [\n    <DisplayTime\n      label=\"Total\"\n      seconds={workSecs}\n      active={false}\n      key=\"display-total-seconds\"\n    />,\n    <DisplayTime\n      seconds={curSec}\n      size='large'\n      active={true}\n      key=\"display-current-seconds\"\n    />\n  ];\n\n  // Set static timer direction state on load\n  useEffect(() => {\n    setIsCountASC(true);\n  }, [setIsCountASC]);\n\n  // The Return Rendered componet\n  return (\n    <div>\n      <Panel\n        displayTimes={displayTimes}\n        timerTitle={timerTitle}\n        inputs={inputs}\n      />\n      <EndConfetti/>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n","import React, { useContext, useEffect } from 'react';\nimport { TimerContext } from '../../context/TimerProvider';\n\n// Import components\nimport Panel from '../generic/Panel';\nimport Input from '../generic/Input';\nimport DisplayTime from '../generic/DisplayTime';\n// Hook to reset all state when component unloads\nimport useResetTimerCallback from \"../../utils/useResetTimerCallback\";\n// Component to show a fun effect when timer ends\nimport EndConfetti from '../../utils/EndConfetti';\n\n/**\n * Countdown functional component\n * Has one input and one display that counts down.\n */\nconst Countdown = () => {\n  const {\n    curSec,\n    workSecs,\n    setWorkSecs,\n    setCurSec,\n    setIsCountASC,\n  } = useContext(TimerContext);\n\n  // Hook to reset all state when component unloads;\n  useResetTimerCallback();\n\n  const timerTitle = 'Countdown';\n  const inputs = [\n     <Input\n      onChange={(event) => {\n        const num = parseInt(event.target.value);\n        // The number of seconds to count down\n        setWorkSecs((num > 0 ? num : 0));\n        // Setting Cur sec to start at the total for countdown\n        setCurSec((num > 0 ? num : 0));\n      }}\n      label='Seconds'\n      name='seconds'\n      value={workSecs}\n      key='input-total-seconds'\n    />\n  ];\n  // Countdown displays the single count down time\n  const displayTimes = [\n    <DisplayTime\n      seconds={curSec}\n      size='large'\n      active={true}\n      key='display-current-seconds'\n    />\n  ]\n\n  // Set static timer direction state on load\n  useEffect(() => {\n    setIsCountASC(false);\n  }, [setIsCountASC]);\n\n  return (\n    <div>\n      <Panel\n          timerTitle={timerTitle}\n          inputs={inputs}\n          displayTimes={displayTimes}\n      />\n      <EndConfetti/>\n    </div>\n  );\n}\n\nexport default Countdown;\n","import React, {useContext, useEffect } from \"react\";\nimport { TimerContext } from \"../../context/TimerProvider\";\n\n// Import components\nimport Panel from \"../generic/Panel\";\nimport Input from \"../generic/Input\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport DisplayTime from \"../generic/DisplayTime\";\n\n// Hook to reset all state when component unloads\nimport useResetTimerCallback from \"../../utils/useResetTimerCallback\";\n// Component to show a fun effect when timer ends\nimport EndConfetti from '../../utils/EndConfetti';\n\n/**\n * XY functional component\n * Has two inputs, one for rounds, and one for work seconds per round.\n * Has two time displays to show ending secs for the current round and current\n * seconds.\n * Has a rounds display that shows the current round.\n */\nconst XY = () => {\n  const timerTitle = \"XY\";\n  const {\n    curSec,\n    workSecs,\n    setWorkSecs,\n    rounds,\n    setRounds,\n    setIsCountASC,\n  } = useContext(TimerContext);\n  // Hook to reset all state when component unloads;\n  useResetTimerCallback();\n\n  // The Array of inputs used in this timer\n  const inputs = [\n     <Input\n      onChange={(event) => {\n        const num = parseInt(event.target.value);\n        // The number of seconds per round\n        setWorkSecs((num > 0 ? num : 0));\n      }}\n      label=\"Seconds\"\n      name=\"work\"\n      value={workSecs}\n      key=\"input-total-work-seconds\"\n    />,\n     <Input\n     onChange={(event) => {\n       const num = parseInt(event.target.value);\n       // The number of rounds\n       setRounds((num > 0 ? num : 0));\n     }}\n      label=\"Rounds\"\n      name=\"rounds\"\n      value={rounds}\n      key=\"input-total-rounds\"\n    />\n  ];\n  // The Array of diplays used in this timer\n  const displayTimes = [\n    <DisplayTime\n      seconds={workSecs}\n      active={false}\n      key=\"display-total-time\"\n    />,\n    <DisplayTime\n      seconds={curSec}\n      size='large'\n      active={true}\n      key=\"display-countdown-time\"\n    />\n  ]\n\n  // Set static timer direction state on load\n  useEffect(() => {\n    setIsCountASC(true);\n  }, [setIsCountASC]);\n\n  return (\n    <div>\n      <Panel\n          timerTitle={timerTitle}\n          displayRound={(<DisplayRounds/>)}\n          inputs={inputs}\n          displayTimes={displayTimes}\n      />\n      <EndConfetti/>\n    </div>\n  );\n}\n\nexport default XY;\n","import React, {useContext, useEffect } from \"react\";\n\nimport { TimerContext } from \"../../context/TimerProvider\";\n\n// Import components\nimport Panel from \"../generic/Panel\";\nimport Input from \"../generic/Input\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\n\n// Hook to reset all state when component unloads\nimport useResetTimerCallback from \"../../utils/useResetTimerCallback\";\n// Component to show a fun effect when timer ends\nimport EndConfetti from '../../utils/EndConfetti';\n\n/**\n * Tabata functional component\n * Has three inputs, one for rounds, rest secs, work secs.\n * Has two time displays to show ending secs for the current round and current\n * seconds.\n * Has a rounds display that shows the current round.\n */\nconst Tabata = () => {\n  const timerTitle = \"Tabata\";\n  const {\n    curSec,\n    workSecs,\n    setWorkSecs,\n    restSecs,\n    setRestSecs,\n    rounds,\n    setRounds,\n    setIsCountASC,\n    isInRestingContext,\n  } = useContext(TimerContext);\n  // Hook to reset all state when component unloads;\n  useResetTimerCallback();\n\n  // The amount of total secs in current Tabata segment\n  const seconds =  isInRestingContext() ? restSecs : workSecs;\n  const label = isInRestingContext() ? 'Rest' : 'Work';\n\n  const inputs = [\n    <Input\n      onChange={(event) => {\n        const num = parseInt(event.target.value);\n        setWorkSecs((num > 0 ? num : 0));\n      }}\n      label=\"Work seconds\"\n      name=\"Work\"\n      value={workSecs}\n      key=\"input-total-work-seconds\"\n    />,\n    <Input\n     onChange={(event) => {\n       const num = parseInt(event.target.value);\n       setRestSecs((num > 0 ? num : 0));\n     }}\n     label=\"Rest seconds\"\n     name=\"rest\"\n     value={restSecs}\n     key=\"input-total-rest-seconds\"\n   />,\n   <Input\n    onChange={(event) => {\n      const num = parseInt(event.target.value);\n      setRounds((num > 0 ? num : 0));\n    }}\n    label=\"Rounds\"\n    name=\"rounds\"\n    value={rounds}\n    key=\"input-total-rounds\"\n    />\n  ];\n  // Countdown displays the single count down time\n  const displayTimes = [\n    <DisplayTime\n      label={label}\n      seconds={seconds}\n      key=\"display-total-time\"\n      active={false}\n    />,\n    <DisplayTime\n      label='a'\n      seconds={curSec}\n      size='large'\n      active={true}\n      key=\"display-countdown-time\"\n    />\n  ];\n\n    // Set static timer direction state on load\n    useEffect(() => {\n      setIsCountASC(true);\n    }, [setIsCountASC]);\n\n    // Render!\n    return (\n      <div>\n        <Panel\n            timerTitle={timerTitle}\n            inputs={inputs}\n            displayTimes={displayTimes}\n            displayRound={(<DisplayRounds/>)}\n        />\n        <EndConfetti/>\n      </div>\n    );\n}\n\nexport default Tabata;\n","import React, { useContext } from \"react\";\n// Enabled styled components\nimport styled from \"styled-components\";\n// Import timer utlity function\nimport { getHmsDisplayFromSecs } from \"../utils/HelperFunctions\";\nimport { STATUS } from '../utils/constants';\n// Context Provider\nimport { TimerQueueContext } from \"../context/TimerQueueProvider\";\n// Use button for timer choices\nimport Button from \"../components/generic/Button\";\n\n// Common color for default timer background\nimport GENERIC from \"../shared/COLOR\";\n\nconst ListWrapper = styled.div`\n  border: 1px solid gray;\n  color: ${GENERIC.QUEUE_TIMER.container.color};\n  background-color: ${GENERIC.QUEUE_TIMER.container.background};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst SummaryContainer = styled.div`\n  display:flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TimerSummary = styled.div`\n  border: 1px solid gray;\n  margin: 10px;\n  padding: 10px;\n  border-radius: 10%;\n  color: ${(props) => {\n    return GENERIC.QUEUE_TIMER[props.activeKey].color\n  }};\n  background-color: ${(props) => {\n    return GENERIC.QUEUE_TIMER[props.activeKey].background\n  }};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst TimeHeader = styled.div`\n  padding: 10px;\n  font-size: 1.3em;\n  font-weight: bold;\n  margin: auto;\n  text-align: center;\n`;\n\nconst TimeSubHeader = styled.div`\n  padding: 3px;\n  margin: auto;\n  align: center;\n`;\n\n\n/**\n * Helper to convert seconds into display HH:MM:SS\n */\nconst ShowQueuedList = ({curQueueTime}) => {\n  // Retrieve the queue of configed timers\n  const {\n    timers,\n    totalTime,\n    curQTimer,\n    queueEnded,\n    deleteTimer,\n  } = useContext(TimerQueueContext);\n  // loop through the list of queued timers\n  const timerElems = timers.map((timer, index) => {\n    const {\n      title,\n      workSecs,\n      restSecs,\n      rounds,\n      state\n    } = timer;\n    return (\n      <SummaryContainer key={index}>\n        <TimerSummary\n          activeKey={\n            state === STATUS.RUNNING\n            ? 'active'\n            : (\n              state === STATUS.COMPLETED\n              ? 'completed'\n              : 'inactive'\n            )\n          }\n        >\n          {title}\n          {workSecs !== 0 && (\n            <div>\n              Time: {getHmsDisplayFromSecs(workSecs)}\n            </div>\n          )}\n          {restSecs !== 0 && (\n            <div>\n              Rest: {getHmsDisplayFromSecs(restSecs)}\n            </div>\n          )}\n          {rounds !== 0 && (\n            <div>\n              Rounds: {rounds}\n            </div>\n          )}\n          {state && (\n            <div>\n              {state}\n            </div>\n          )}\n        </TimerSummary>\n        {!curQTimer && !queueEnded && (\n          <Button\n            key='Delete-Timer'\n            size='medium'\n            active={false}\n            text='Delete &#128465;'\n            onClick={() => deleteTimer(index)}\n          />\n        )}\n      </SummaryContainer>\n    );\n  });\n  return (\n    <ListWrapper>\n      <HeaderContainer>\n        <TimeHeader>\n          Timer Queue\n        </TimeHeader>\n        <TimeSubHeader>\n          Total Time: {getHmsDisplayFromSecs(totalTime)}\n        </TimeSubHeader>\n        {curQueueTime > 0 && (\n          <TimeSubHeader>\n            Running Time: {getHmsDisplayFromSecs(curQueueTime)}\n          </TimeSubHeader>\n        )}\n      </HeaderContainer>\n      <div>\n        <div>{timerElems}</div>\n      </div>\n    </ListWrapper>\n  );\n};\n\nexport default ShowQueuedList;\n","import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n// Import context\nimport { TimerContext } from \"../context/TimerProvider\";\n\n// Import the timers\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\n\n// Use button for timer choices\nimport Button from \"../components/generic/Button\";\n\n// Helper to show list of Timers from the queue context\nimport ShowQueuedList from \"../shared/ShowQueuedList\";\n\n// Common color for default timer background\nimport GENERIC  from \"../shared/COLOR\";\nconst primaryColor =  GENERIC.PANEL.DEFAULT.background;\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst TimerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: start;\n`;\n\nconst Timer = styled.div`\n  border: 1px solid gray;\n  margin: 1em;\n  border-radius: 2em;\n  overflow: hidden;\n  background-color: ${primaryColor};\n  display:flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TimerInstruction = styled.div`\n  min-height: 200px;\n  min-width: 400px;\n  text-align: center;\n  align-self: center;\n  justify-content: center;\n  margin: auto;\n  font-size: 1.5em;\n  color: ${GENERIC.QUEUE_TIMER.container.color};\n  background-color: ${GENERIC.QUEUE_TIMER.container.background};\n`;\nconst TimerQueue = styled.div`\n  min-height: 200px;\n  padding: 10px;\n`;\n\nconst MenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 1em;\n`;\n\nfunction AddTimersView() {\n\n  const {\n    curTimer,\n    setCurTimer,\n  } = useContext(TimerContext);\n\n  const timers = [\n    { title: \"Stopwatch\", component: <Stopwatch /> },\n    { title: \"Countdown\", component: <Countdown /> },\n    { title: \"XY\", component: <XY /> },\n    { title: \"Tabata\", component: <Tabata /> },\n  ]\n\n  // For routing to add button\n  const history = useHistory();\n\n  // previous timer end, current timer load? via effect?\n  const chooseTimer = (timer) => {\n    setCurTimer(timer);\n  };\n\n  const timerElems = timers.map(timer => {\n    return (\n      <Button\n        key={timer.title}\n        size='xlarge'\n        active={curTimer && curTimer.title === timer.title}\n        text={timer.title}\n        onClick={() => chooseTimer(timer)}\n      />\n    )\n  })\n\n  return (\n    <Timers>\n      <TimerContainer>\n        <MenuContainer>\n          {timerElems}\n          {/* Naviate to timer queue */}\n           <Button\n             key='Show-Queue'\n             size='xlarge'\n             active={true}\n             text='Back to Main Page'\n             onClick={() => history.push(`/`)}\n           />\n        </MenuContainer>\n        { curTimer ? (\n          <Timer>\n            {curTimer.component}\n          </Timer>\n        ) : (\n          <Timer>\n            <TimerInstruction>\n                &larr; Choose a timer\n            </TimerInstruction>\n          </Timer>\n        )\n      }\n      <Timer>\n        <TimerQueue>\n          <ShowQueuedList/>\n        </TimerQueue>\n      </Timer>\n      </TimerContainer>\n    </Timers>\n  );\n}\n\nexport default AddTimersView;\n","import {useContext, useEffect, useRef} from \"react\";\nimport { TimerQueueContext } from \"../context/TimerQueueProvider\";\n\n/**\n * Custom hook to reset Queue to start when the Queue unloads\n */\nconst useResetQueueCallback = () => {\n  const { resetQueueStart } = useContext(TimerQueueContext);\n  // Create a reset ref\n  const resetCallback = useRef(() => {\n    resetQueueStart();\n  });\n\n  // On unload reset all timer context\n  useEffect(() => {\n    return () => {\n      resetCallback.current();\n    };\n  },[resetCallback]);\n\n  // Set the current callback ref\n  resetCallback.current = () => {\n    resetQueueStart();\n  }\n}\nexport default useResetQueueCallback;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n// Use button for timer choices\nimport Button from \"../components/generic/Button\";\n// Helper to show list of Timers from the queue context\nimport ShowQueuedList from \"../shared/ShowQueuedList\";\n// Context Provider\nimport { TimerQueueContext } from '../context/TimerQueueProvider';\nimport { TimerContext } from \"../context/TimerProvider\";\n// Hook to reset Timer Queue to starting state when component unloads\nimport useResetQueueCallback from \"../utils/useResetQueueCallback\";\n\n// work queue end confetti\nimport Confetti from 'react-confetti';\n\n// Import status/state constants\nimport { STATUS } from '../utils/constants';\n\n// Common color for default timer background\nimport GENERIC  from \"../shared/COLOR\";\nconst primaryColor =  GENERIC.PANEL.DEFAULT.background;\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst TimerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: start;\n`;\n\nconst Timer = styled.div`\n  border: 1px solid gray;\n  margin: 1em;\n  border-radius: 2em;\n  overflow: hidden;\n  background-color: ${primaryColor};\n  display:flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TimerInstruction = styled.div`\n  min-height: 200px;\n  min-width: 400px;\n  text-align: center;\n  align-self: center;\n  justify-content: center;\n  margin: auto;\n  font-size: 1.5em;\n  color: ${GENERIC.QUEUE_TIMER.container.color};\n  background-color: ${GENERIC.QUEUE_TIMER.container.background};\n`;\n\nconst TimerQueue = styled.div`\n  min-height: 200px;\n  padding: 10px;\n`;\n\nconst MenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 1em;\n`;\n\nfunction WorkQueueView() {\n  // the current seconds state of the timer queue\n  const [curQueueTime, setCurQueueTime] = useState(0);\n  // the current seconds state of the current timer\n  const [curTimerTime, setCurTimerTime] = useState();\n  // Retrieve the queue of configed timers\n  const {\n    timers,\n    curQTimer,\n    nextTimer,\n    initNextTimer,\n    queueEnded,\n    goToEndofQueue,\n    resetQueueStart,\n   } = useContext(TimerQueueContext);\n\n   const {\n    isRunning,\n    isEnded,\n    resetAll,\n    resetToCurTimer,\n    curSec,\n    getCurStartSecs,\n   } = useContext(TimerContext);\n\n   // For routing button\n   const history = useHistory();\n   // Hook to reset tiner queue to start when component unloads\n   useResetQueueCallback();\n\n  /**\n   * Reset local queue state and context queue state\n   */\n  const resetTimerQueueAll = () => {\n    setCurQueueTime(0);\n    setCurTimerTime();\n    resetQueueStart();\n  }\n\n  const hasQueuedTimer = timers && timers.length > 0;\n\n  // The variable middle \"active\" component show notification\n  // and the current running timer from the queue\n  let  activeBlock;\n  if (queueEnded) {\n    // Show notification of completion! (Also has confetti)\n    activeBlock = (\n      <Timer>\n        <TimerInstruction>\n          Completed!\n        </TimerInstruction>\n      </Timer>\n    );\n  } else if (curQTimer) {\n    // Show the current active Timer from running queue\n    activeBlock = (\n      <Timer>\n        {curQTimer.component}\n      </Timer>\n    );\n  } else if (!timers || timers.length === 0 ) {\n    // Show notification to add a timer to the queue\n    activeBlock = (\n      <Timer>\n        <TimerInstruction>\n          &larr; Add a timer\n        </TimerInstruction>\n      </Timer>\n    );\n  } else {\n    // Show notification to run the queue!\n    activeBlock = (\n      <Timer>\n        <TimerInstruction>\n          &larr; Run Queue!\n        </TimerInstruction>\n      </Timer>\n    );\n  }\n\n  // When a timer ends, init the next one\n  useEffect(() => {\n    if (isEnded()) {\n      // Reset the timer context data\n      resetAll();\n      // Start next timer if there is one\n      initNextTimer();\n    }\n  }, [isEnded, resetAll, initNextTimer]);\n\n  // When the cur timer changes, update the timer context\n  useEffect(() => {\n    // Init the new curent timer\n    if (curQTimer && curQTimer.state === STATUS.NOT_RUNNING) {\n      // Prep timer for starting\n      curQTimer.state = STATUS.RUNNING;\n      // Update the TimerContext\n      resetToCurTimer(curQTimer);\n    }\n  }, [curQTimer, resetToCurTimer]);\n\n  // Locally keep track of changes in the timer curSec\n  useEffect(() => {\n    if (curSec !== curTimerTime\n      && isRunning()\n      && getCurStartSecs() !== curSec\n    ) {\n      // Keep a local reference of the current Timer time\n      setCurTimerTime(curSec);\n      // Update the current running queued time if needed\n      setCurQueueTime(c => {\n        // First update is initialize\n        if (!Number.isFinite(c)) {\n          return 0;\n        }\n        // Increment if curSec has incremented\n        if (curSec !== c) {\n          return c + 1\n        }\n        // Otherwise leave as is\n        return c;\n      });\n    }\n  }, [curSec, curTimerTime, setCurTimerTime, isRunning, getCurStartSecs]);\n\n  return (\n    <Timers>\n      <TimerContainer>\n        <MenuContainer>\n          {hasQueuedTimer && (\n            <Button\n              key='Run-Queue'\n              size='xlarge'\n              active={true}\n              text={(\n                nextTimer\n                ? 'End All'\n                : (\n                  curQTimer\n                    ? 'End'\n                    : (\n                      queueEnded\n                      ? 'Reset Queue'\n                      : 'Run Queue'\n                    )\n                  )\n              )}\n              //goToEndofQueue\n              onClick={() => {\n                return (\n                  nextTimer\n                  ? goToEndofQueue()\n                  : (\n                    queueEnded\n                      ? resetTimerQueueAll()\n                      : initNextTimer()\n                    )\n                  )\n                }\n              }\n            />\n          )}\n         {(!curQTimer && !queueEnded &&\n            <Button\n              key='Add-Timer'\n              size='xlarge'\n              active={hasQueuedTimer ? false : true}\n              text='Add Timer'\n              onClick={() => history.push(`/add`)}\n            />\n        )}\n        {(!curQTimer && !queueEnded &&\n           <Button\n             key='Documentation'\n             size='xlarge'\n             active={false}\n             text='Component Docs'\n             onClick={() => history.push(`/docs`)}\n           />\n       )}\n        </MenuContainer>\n        {/* Show the active timer or a message */}\n        {activeBlock}\n        {/* Show queued timer list */}\n        { timers.length > 0 && (\n          <Timer>\n            <TimerQueue>\n              <ShowQueuedList\n                curQueueTime={curQueueTime}\n              />\n            </TimerQueue>\n          </Timer>\n        )\n      }\n      {(queueEnded && <Confetti/>)}\n      </TimerContainer>\n    </Timers>\n  );\n}\n\nexport default WorkQueueView;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\n\n// import shared color\nimport GENERIC  from \"./COLOR\";\n// import the banner title map\nimport {LOCATION_TITLE_MAP} from \"../utils/constants\";\n\nconst StyledHeader = styled.div`\n  margin: auto;\n  text-align: center;\n  font-size: 2em;\n  font-weight: bold;\n  margin: 1rem;\n  background-color: ${GENERIC.COLOR.primaryLightest.color};\n`;\n\n/**\n * Helper to display the page banner\n */\nconst PageHeader = () => {\n  const location = useLocation();\n  const curPageHeader = LOCATION_TITLE_MAP[location.pathname];\n  return(\n    <StyledHeader>\n      {curPageHeader}\n    </StyledHeader>\n  );\n};\n\nexport default PageHeader;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n// Import the 3 views\nimport DocumentationView from \"./views/DocumentationView\";\nimport AddTimersView from \"./views/AddTimersView\";\nimport WorkQueueView from \"./views/WorkQueueView\";\n\n// Title components\nimport TimerQueueProvider from \"./context/TimerQueueProvider\";\n\n// Timer Provider\nimport TimerProvider from \"./context/TimerProvider\";\nimport PageHeader from \"./shared/PageHeader\";\n\nconst Container = styled.div`\n  flex: 1;\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n  font-size: 1.4rem;\n  /* Using Gill Sans because it's fun, easy to read, and emits energy */\n  font-family: \"Gill Sans\", sans-serif;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Router>\n        <PageHeader/>\n        <Switch>\n          <Route path=\"/docs\">\n            {/* Add context to docs to avoid loosing queued timers */}\n            <TimerQueueProvider>\n              <TimerProvider>\n                <DocumentationView />\n              </TimerProvider>\n            </TimerQueueProvider>\n          </Route>\n          <Route path=\"/add\">\n            <TimerQueueProvider>\n              <TimerProvider>\n                <AddTimersView />\n              </TimerProvider>\n            </TimerQueueProvider>\n          </Route>\n          <Route path=\"/\">\n            <TimerQueueProvider>\n              <TimerProvider>\n                <WorkQueueView/>\n              </TimerProvider>\n            </TimerQueueProvider>\n          </Route>\n        </Switch>\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}